
在play的一个事物中如何使用另外一个数据源：
当我们在方法或者controller类上面添加@Transactional注解之后，会默认使用name为default的entityManager
（可以通过查看Transactional的源码，以及TransactionalAction）：
@With(TransactionalAction.class)
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface Transactional {
    String value() default "default";
    boolean readOnly() default false;
}

/**
 * Wraps an action in am JPA transaction.
 */
public class TransactionalAction extends Action<Transactional> {

    private JPAApi jpaApi;

    @Inject
    public TransactionalAction(JPAApi jpaApi) {
        this.jpaApi = jpaApi;
    }

    public CompletionStage<Result> call(final Context ctx) {
        return jpaApi.withTransaction(
            configuration.value(),
            configuration.readOnly(),
            () -> delegate.call(ctx)
        );
    }

}

所以，比如说我们有一个action方法上面加了@Transactional注解，此时在方法里面调用JPA.em()获取到的是name为default的entityManager,
如果我们想要使用其他的数据源，则需要
1.添加下面的配置，
db.tigase.driver=com.mysql.jdbc.Driver
db.tigase.url="jdbc:mysql://xxxxx.com:3306/tigasedb?characterEncoding=UTF-8"
db.tigase.user="xxxxx"
db.tigase.password="xxxxx"
db.tigase.jndiName=TigaseDS
jpa.tigase=tigasePersistenceUnit

2.注入jpaApi
  @Inject
  private JPAApi jpaApi;
3.调用jpaApi.withTransaction(String name, boolean readOnly, Function<EntityManager, Integer> block)来调用其他的entityManager,
例如：
jpaApi.withTransaction("tigase", false, (em) -> {
				return em.createNativeQuery("{call TigAddUserPlainPw(:tigaseUserId, :token)}")
					.setParameter("tigaseUserId", 1)
					.setParameter("token", "token1")
					.executeUpdate();
			});
即可。

# Play framework app + JPA with multiple persistenceUnit / DB

This is a play 2.1 sample application which show how to connect two different databases with the use of two
different persistenceUnits.

## What this sample do?
There is three actions in the Application controller which create and persist a User and a Company object in a H2
database with the use of the "defaultPersistenceUnit" and the "otherPersistenceUnit" declared in the persistence.xml
file.

In test1 and test2 JPA.em().persist() is directly used in the action and in the test3 JPA.em().persist() is used inside
the Entity(Model) classes.

When JPA.em().persist() is used inside an action the correct Transaction has to be specified manually (see test1 and 2),
however when JPA.em().persist() is used directly in one of the Model's methods (see test3) the correct persistence
should be used based on what is declared in the config files. But it's not. So the test3 generate an error :
    IllegalArgumentException: Unknown entity: models.Company
This error is generated because the JPA entity manager is not capable to use a transaction with the otherPersistenceUnit
declared in the persistence.xml.

## How to use this sample?
1. Clone this project
2. Start the application ($play run)
3. Use http://localhost:9000/test1, http://localhost:9000/test2 to run one of the working example.
3. Use http://localhost:9000/test3 to run the not working example.

A User and a Company object is persisted in the H2 memory database.

To browse the H2 database, use the $h2-browser command in the play console.

H2 databases can be replaced by other databases like MySQL. Just modify it in the application.conf and set the correct
hibernate.dialect in the persistence.xml file.


